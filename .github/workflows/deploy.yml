name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Ejecutar Pruebas Unitarias (sin BD)
        run: |
          cd backend
          pytest tests/test_message_format.py tests/test_websocket.py --junitxml=report_unit.xml

  integration-tests:
    name: Test BD y RabbitMQ
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar dependencias
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Esperar a que BD y RabbitMQ est√©n listos
        run: sleep 20  

      - name: Crear tabla en PostgreSQL
        run: |
          PSQL_CONTAINER_ID=$(docker ps -qf "ancestor=postgres:latest")
          docker exec $PSQL_CONTAINER_ID psql -U user -d testdb -c "
          CREATE TABLE IF NOT EXISTS ropa (
              id SERIAL PRIMARY KEY,
              tipo VARCHAR(50),
              color VARCHAR(50),
              talla VARCHAR(10),
              precio DECIMAL(10,2)
          );"

      - name: Ejecutar Pruebas de BD y RabbitMQ
        run: |
          cd backend
          pytest tests/test_database.py tests/test_rabbitmq.py --junitxml=report_integration.xml

  e2e-tests:
    name: Ejecutar Pruebas e2e con Playwright
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Instalar Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Crear red Docker manualmente (si no existe)
        run: docker network create app-network || true

      - name: Levantar backend y frontend
        run: docker-compose up -d backend frontend  # üîπ Asegurar que backend y frontend est√°n corriendo

      - name: Verificar si los contenedores est√°n corriendo
        run: docker ps -a

      - name: Esperar a que los servicios est√©n listos
        run: sleep 20  

      - name: Verificar conexi√≥n con el backend
        run: |
          ATTEMPTS=10
          until $(curl --output /dev/null --silent --head --fail http://backend:8000/productos/); do
              echo "‚è≥ Esperando que el backend est√© disponible..."
              ATTEMPTS=$((ATTEMPTS - 1))
              if [ $ATTEMPTS -le 0 ]; then
                echo "‚ùå El backend no se levant√≥ a tiempo"
                exit 1
              fi
              sleep 5
          done
          echo "‚úÖ Backend est√° en l√≠nea"

      - name: Instalar dependencias
        run: |
          cd vue-app
          npm install
          npx playwright install --with-deps  # üîπ Instalar navegadores de Playwright

      - name: Ejecutar Pruebas e2e con Playwright
        run: |
          cd vue-app
          npx playwright test 

      - name: Apagar servicios
        run: docker-compose down
