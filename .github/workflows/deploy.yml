name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  unit-tests:
    name: Pruebas Unitarias
    runs-on: ubuntu-latest
    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Ejecutar Pruebas Unitarias (sin BD)
        run: |
          cd backend
          pytest tests/test_message_format.py tests/test_websocket.py --junitxml=report_unit.xml

  integration-tests:
    name: Test BD y RabbitMQ
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar dependencias
        run: |
          cd backend
          pip install -r requirements.txt

      - name: Esperar a que BD y RabbitMQ estén listos
        run: sleep 20  

      - name: Crear tabla en PostgreSQL
        run: |
          PSQL_CONTAINER_ID=$(docker ps -qf "ancestor=postgres:latest")
          docker exec $PSQL_CONTAINER_ID psql -U user -d testdb -c "
          CREATE TABLE IF NOT EXISTS ropa (
              id SERIAL PRIMARY KEY,
              tipo VARCHAR(50),
              color VARCHAR(50),
              talla VARCHAR(10),
              precio DECIMAL(10,2)
          );"

      - name: Ejecutar Pruebas de BD y RabbitMQ
        run: |
          cd backend
          pytest tests/test_database.py tests/test_rabbitmq.py --junitxml=report_integration.xml

  e2e-tests:
    name: Pruebas End-to-End con Playwright
    runs-on: ubuntu-latest
    needs: integration-tests
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: testdb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U user -d testdb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      rabbitmq:
        image: rabbitmq:3-management
        ports:
          - 5672:5672
          - 15672:15672

      backend:
        build: ./backend
        ports:
          - 8000:8000
        env:
          DATABASE_URL: postgresql://user:password@postgres:5432/testdb
        options: >-
          --health-cmd "curl -f http://localhost:8000/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Instalar dependencias
        run: |
          cd vue-app
          npm install

      - name: Instalar Playwright
        run: |
          cd vue-app
          npx playwright install --with-deps

      - name: Ejecutar Pruebas E2E
        run: |
          cd vue-app
          npx playwright test --reporter=junit

      - name: Guardar Reporte de Playwright
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: vue-app/playwright-report
